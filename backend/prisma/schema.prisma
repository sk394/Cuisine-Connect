// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  ADMIN
}

// User with id as int increment, name as string, and email as string
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  bookmarks     Bookmark[]
  recipes       Recipe[]
  ratings       Rating[]
  comments      Comment[]
  favoriteFood  String?  @default("pizza")
  foodPreferences String[] @default(["pizza"])
  hometown     String? @default("New York")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// food recipe schema
model Recipe {
  id           String     @id @default(cuid())
  title        String
  postStatus   String     @default("draft")
  ingredients  String[]
  instructions String
  imageName    String
  userId       String
  bookmarks    Bookmark[]
  ratings      Rating[]
  comments     Comment[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId])
}

model Rating {
  id          String @id @default(cuid())
  value       Int
  userId      String
  recipeId    String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, recipeId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
